// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for detecting anomalies in student attendance patterns.
 *
 * - detectAttendanceAnomaly - Function to detect anomalies in attendance data.
 * - AttendanceAnomalyInput - Input type for the detectAttendanceAnomaly function.
 * - AttendanceAnomalyOutput - Output type for the detectAttendanceAnomaly function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AttendanceAnomalyInputSchema = z.object({
  studentId: z.string().describe('The unique identifier for the student.'),
  meetingId: z.string().describe('The unique identifier for the meeting.'),
  joinLeaveEvents: z
    .array(
      z.object({
        timestamp: z.string().describe('The timestamp of the join/leave event.'),
        type: z.enum(['join', 'leave']).describe('The type of event (join or leave).'),
      })
    )
    .describe('An array of join/leave events for the student in the meeting.'),
});

export type AttendanceAnomalyInput = z.infer<typeof AttendanceAnomalyInputSchema>;

const AttendanceAnomalyOutputSchema = z.object({
  isAnomaly: z
    .boolean()
    .describe('Whether the attendance pattern is considered anomalous.'),
  explanation: z
    .string()
    .describe('Explanation of why the attendance pattern is considered anomalous.'),
});

export type AttendanceAnomalyOutput = z.infer<typeof AttendanceAnomalyOutputSchema>;

export async function detectAttendanceAnomaly(
  input: AttendanceAnomalyInput
): Promise<AttendanceAnomalyOutput> {
  return attendanceAnomalyFlow(input);
}

const attendanceAnomalyPrompt = ai.definePrompt({
  name: 'attendanceAnomalyPrompt',
  input: {schema: AttendanceAnomalyInputSchema},
  output: {schema: AttendanceAnomalyOutputSchema},
  prompt: `You are an AI assistant specializing in detecting anomalies in student attendance data.

  Given the following attendance data for a student in a meeting, determine if the attendance pattern is anomalous. An anomalous pattern includes students repeatedly joining and leaving a meeting.

  Student ID: {{{studentId}}}
  Meeting ID: {{{meetingId}}}
  Join/Leave Events:
  {{#each joinLeaveEvents}}
  - Timestamp: {{{timestamp}}}, Type: {{{type}}}
  {{/each}}

  Based on this information, determine if the student's attendance pattern is anomalous and provide an explanation.

  Consider the following when determining if an attendance pattern is anomalous:
  - Number of join/leave events
  - Frequency of join/leave events
  - Duration of time spent in the meeting

  Output your response in JSON format matching the schema.
`,
});

const attendanceAnomalyFlow = ai.defineFlow(
  {
    name: 'attendanceAnomalyFlow',
    inputSchema: AttendanceAnomalyInputSchema,
    outputSchema: AttendanceAnomalyOutputSchema,
  },
  async input => {
    const {output} = await attendanceAnomalyPrompt(input);
    return output!;
  }
);
